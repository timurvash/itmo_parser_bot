import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import threading
import time
import pytz

from config import BOT_TOKEN, ADMIN_ID
from database import (init_database, add_or_update_user, set_user_id, get_user_id,
                      subscribe_user, unsubscribe_user, get_all_subscribers,
                      save_rating_data, get_last_contract_count, get_user_stats, get_rating_stats)
from parser import ITMOParser

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏
logging.getLogger('aiogram.dispatcher').setLevel(logging.WARNING)
logging.getLogger('aiogram.bot').setLevel(logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è event loop
main_loop = None


def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(MOSCOW_TZ)


def format_moscow_time(dt=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    if dt is None:
        dt = get_moscow_time()
    return dt.strftime('%Y-%m-%d %H:%M:%S')


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data="admin_rating")],
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")]
        ]
    )
    return keyboard


def get_settings_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÜî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID", callback_data="set_id")],
            [InlineKeyboardButton(text="üëÅÔ∏è –ú–æ–π ID", callback_data="show_id")]
        ]
    )
    return keyboard


# Middleware –¥–ª—è —É—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message.middleware()
async def message_counter_middleware(handler, event, data):
    """Middleware –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if isinstance(event, types.Message) and event.from_user:
        await add_or_update_user(
            event.from_user.id,
            event.from_user.username,
            event.from_user.first_name,
            event.from_user.last_name
        )
    return await handler(event, data)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    moscow_time = format_moscow_time()
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ò–¢–ú–û.\n\n"
        f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {moscow_time} (–ú–°–ö)\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        f"üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞\n\n"
        f"üí° –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    await message.answer("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_id
@dp.message(Command("set_id"))
async def cmd_set_id(message: types.Message):
    args = message.text.split()[1:]
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_id <–≤–∞—à_id>\n–ü—Ä–∏–º–µ—Ä: /set_id 4154668")
        return

    your_id = args[0]
    await set_user_id(message.from_user.id, your_id)
    await message.answer(f"‚úÖ –í–∞—à ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {your_id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_id
@dp.message(Command("my_id"))
async def cmd_my_id(message: types.Message):
    your_id = await get_user_id(message.from_user.id)
    if your_id:
        await message.answer(f"üÜî –í–∞—à —Ç–µ–∫—É—â–∏–π ID: {your_id}")
    else:
        await message.answer("‚ùå ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_id <–≤–∞—à_id> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message(F.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")
async def check_rating(message: types.Message):
    await message.answer("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    user_your_id = await get_user_id(message.from_user.id)

    parser = ITMOParser()
    data = parser.parse_rating(user_your_id)

    if data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_your_id:
            if data['your_position']:
                your_pos_text = f"üéØ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {data['your_position']}"
                if data['your_contract_position']:
                    your_pos_text += f"\nüíº –ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {data['your_contract_position']}"
                    if data['your_paid_position']:
                        your_pos_text += f"\nüí∞ –ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {data['your_paid_position']}"
                    elif data['your_unpaid_position']:
                        your_pos_text += f"\n‚è≥ –ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {data['your_unpaid_position']}"
                else:
                    your_pos_text += f"\nüíº –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞"
            else:
                your_pos_text = f"‚ùå –í–∞—à ID ({user_your_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"
        else:
            your_pos_text = "‚ÑπÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"

        result_text = (
            f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ò–¢–ú–û**\n\n"
            f"üë• –í—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫ –≤ —Å–ø–∏—Å–∫–µ: {data['total_people']}\n"
            f"üìù –ß–µ–ª–æ–≤–µ–∫ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏: {data['contract_count']}\n"
            f"üí∞ –î–æ–≥–æ–≤–æ—Ä—ã –æ–ø–ª–∞—á–µ–Ω—ã: {data['contract_paid_count']}\n"
            f"‚è≥ –î–æ–≥–æ–≤–æ—Ä—ã –Ω–µ –æ–ø–ª–∞—á–µ–Ω—ã: {data['contract_unpaid_count']}\n\n"
            f"{your_pos_text}\n\n"
            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']} (–ú–°–ö)"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await save_rating_data(data)

        await message.answer(result_text, parse_mode='Markdown')
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe(message: types.Message):
    if await subscribe_user(message.from_user.id):
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏
@dp.message(F.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe(message: types.Message):
    if await unsubscribe_user(message.from_user.id):
        await message.answer("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "set_id")
async def callback_set_id(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üÜî –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ ID –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/set_id <–≤–∞—à_id>\n\n"
        "–ü—Ä–∏–º–µ—Ä: /set_id 4154668"
    )


@dp.callback_query(F.data == "show_id")
async def callback_show_id(callback: types.CallbackQuery):
    await callback.answer()
    your_id = await get_user_id(callback.from_user.id)
    if your_id:
        await callback.message.answer(f"üÜî –í–∞—à —Ç–µ–∫—É—â–∏–π ID: {your_id}")
    else:
        await callback.message.answer("‚ùå ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_id <–≤–∞—à_id> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")


@dp.callback_query(F.data == "admin_users")
async def callback_admin_users(callback: types.CallbackQuery):
    if not ADMIN_ID or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()
    stats = await get_user_stats()

    text = (
        f"üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['total_subscribers']}\n"
        f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n\n"
        f"**–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
    )

    for i, user in enumerate(stats['top_users'], 1):
        user_id, username, first_name, last_name, msg_count, last_activity = user
        name = first_name or username or f"ID:{user_id}"
        text += f"{i}. {name} - {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await callback.message.answer(text, parse_mode='Markdown')


@dp.callback_query(F.data == "admin_rating")
async def callback_admin_rating(callback: types.CallbackQuery):
    if not ADMIN_ID or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()
    stats = await get_rating_stats()

    text = "üìà **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:**\n\n"

    for record in stats:
        timestamp, total, contracts, paid, unpaid = record
        text += (
            f"üïê {timestamp}\n"
            f"–í—Å–µ–≥–æ: {total}, –î–æ–≥–æ–≤–æ—Ä—ã: {contracts}\n"
            f"–û–ø–ª–∞—á–µ–Ω–æ: {paid}, –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ: {unpaid}\n\n"
        )

    await callback.message.answer(text, parse_mode='Markdown')


@dp.callback_query(F.data == "admin_broadcast")
async def callback_admin_broadcast(callback: types.CallbackQuery):
    if not ADMIN_ID or callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer()
    await callback.message.answer(
        "üì¢ –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>"
    )


# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message):
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    text = message.text[len("/broadcast"):].strip()
    if not text:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    subscribers = await get_all_subscribers()
    sent = 0

    for user_id in subscribers:
        try:
            await bot.send_message(user_id, f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{text}", parse_mode='Markdown')
            sent += 1
            await asyncio.sleep(0.1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{len(subscribers)}")


# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def notify_users(old_data, new_data):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏"""
    try:
        users = await get_all_subscribers()
        moscow_time = format_moscow_time()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        changes = []
        if old_data.get('contract_count', 0) != new_data['contract_count']:
            changes.append(f"–î–æ–≥–æ–≤–æ—Ä—ã: {old_data.get('contract_count', 0)} ‚Üí {new_data['contract_count']}")
        if old_data.get('contract_paid_count', 0) != new_data['contract_paid_count']:
            changes.append(f"–û–ø–ª–∞—á–µ–Ω–æ: {old_data.get('contract_paid_count', 0)} ‚Üí {new_data['contract_paid_count']}")
        if old_data.get('contract_unpaid_count', 0) != new_data['contract_unpaid_count']:
            changes.append(
                f"–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ: {old_data.get('contract_unpaid_count', 0)} ‚Üí {new_data['contract_unpaid_count']}")

        if not changes:
            return

        message_text = (
                f"üö® **!!!–û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–ê!!!**\n\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(changes) + "\n\n"
                                                         f"üìà –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                                         f"üë• –í—Å–µ–≥–æ –ª—é–¥–µ–π: {new_data['total_people']}\n"
                                                         f"üìù –î–æ–≥–æ–≤–æ—Ä—ã: {new_data['contract_count']}\n"
                                                         f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {new_data['contract_paid_count']}\n"
                                                         f"‚è≥ –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ: {new_data['contract_unpaid_count']}\n\n"
                                                         f"üïê {moscow_time} (–ú–°–ö)"
        )

        successful_sends = 0
        for user_id in users:
            try:
                await bot.send_message(user_id, message_text, parse_mode='Markdown')
                successful_sends += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {successful_sends}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ notify_users: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def scheduled_parsing():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        parser = ITMOParser()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        old_count = asyncio.run(get_last_contract_count())

        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = parser.parse_rating()

        if data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            asyncio.run(save_rating_data(data))

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if old_count is not None and old_count != data['contract_count']:
                moscow_time = format_moscow_time()
                print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {old_count} -> {data['contract_count']} –≤ {moscow_time}")

                # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop
                if main_loop and not main_loop.is_closed():
                    old_data = {'contract_count': old_count}
                    asyncio.run_coroutine_threadsafe(
                        notify_users(old_data, data),
                        main_loop
                    )

            moscow_time = format_moscow_time()
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {moscow_time}, –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {data['contract_count']}")
        else:
            moscow_time = format_moscow_time()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤ {moscow_time}")

    except Exception as e:
        moscow_time = format_moscow_time()
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ scheduled_parsing –≤ {moscow_time}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    import schedule

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule.every(2).hours.do(scheduled_parsing)

    moscow_time = format_moscow_time()
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞) –≤ {moscow_time}")

    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            moscow_time = format_moscow_time()
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –≤ {moscow_time}: {e}")
            time.sleep(60)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global main_loop
    main_loop = asyncio.get_running_loop()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()

    moscow_time = format_moscow_time()
    print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time}!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
    scheduled_parsing()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        await dp.start_polling(
            bot,
            polling_timeout=20,
            request_timeout=15,
            retry_after=3
        )
    except KeyboardInterrupt:
        moscow_time = format_moscow_time()
        print(f"üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ {moscow_time}")
    except Exception as e:
        moscow_time = format_moscow_time()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {moscow_time}: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        moscow_time = format_moscow_time()
        print(f"üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {moscow_time}")
    except Exception as e:
        moscow_time = format_moscow_time()
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {moscow_time}: {e}")