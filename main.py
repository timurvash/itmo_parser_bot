import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import threading
import time
import pytz

from config import BOT_TOKEN
from database import add_user, remove_user, get_all_users
from parser import ITMOParser

# –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –ª–æ–≥–∏
logging.getLogger('aiogram.dispatcher').setLevel(logging.WARNING)
logging.getLogger('aiogram.bot').setLevel(logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è event loop
main_loop = None


def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(MOSCOW_TZ)


def format_moscow_time(dt=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    if dt is None:
        dt = get_moscow_time()
    return dt.strftime('%Y-%m-%d %H:%M:%S')


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")]
        ],
        resize_keyboard=True
    )
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    moscow_time = format_moscow_time()
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ò–¢–ú–û.\n\n"
        f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {moscow_time} (–ú–°–ö)\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        f"üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message(F.text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥")
async def check_rating(message: types.Message):
    await message.answer("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    parser = ITMOParser()
    data = parser.parse_rating()

    if data:
        your_pos_text = f"üéØ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {data['your_position']}" if data['your_position'] else "‚ùå –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω"
        your_contract_pos_text = f"üíº –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {data['your_contract_position']}" if data[
            'your_contract_position'] else "üíº –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω"

        result_text = (
            f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ò–¢–ú–û**\n\n"
            f"üë• –í—Å–µ–≥–æ —á–µ–ª–æ–≤–µ–∫ –≤ —Å–ø–∏—Å–∫–µ: {data['total_people']}\n"
            f"üìù –ß–µ–ª–æ–≤–µ–∫ —Å –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏: {data['contract_count']}\n\n"
            f"{your_pos_text}\n"
            f"{your_contract_pos_text}\n\n"
            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp']} (–ú–°–ö)"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        parser.save_to_csv(data)

        await message.answer(result_text, parse_mode='Markdown')
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def subscribe(message: types.Message):
    user_id = message.from_user.id
    if await add_user(user_id):
        await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø–∏—Å–∫–∏
@dp.message(F.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def unsubscribe(message: types.Message):
    user_id = message.from_user.id
    if await remove_user(user_id):
        await message.answer("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")


# –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def notify_users(old_count, new_count):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏"""
    try:
        users = await get_all_users()

        moscow_time = format_moscow_time()

        message_text = (
            f"üö® **!!!–û–ë–ù–û–í–õ–ï–ù–ò–ï!!!**\n\n"
            f"üìù –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ —Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏: **{new_count}**\n"
            f"üìä –ë—ã–ª–æ: {old_count}\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if new_count > old_count else ''}{new_count - old_count}\n\n"
            f"üïê {moscow_time} (–ú–°–ö)"
        )

        successful_sends = 0
        for user_id in users:
            try:
                await bot.send_message(user_id, message_text, parse_mode='Markdown')
                successful_sends += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {successful_sends}/{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ notify_users: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
def scheduled_parsing():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        parser = ITMOParser()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–≥–æ–≤–æ—Ä–æ–≤
        old_count = parser.get_last_contract_count()

        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = parser.parse_rating()

        if data:
            new_count = data['contract_count']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            parser.save_to_csv(data)

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if old_count is not None and old_count != new_count:
                moscow_time = format_moscow_time()
                print(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {old_count} -> {new_count} –≤ {moscow_time}")

                # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º event loop
                if main_loop and not main_loop.is_closed():
                    asyncio.run_coroutine_threadsafe(
                        notify_users(old_count, new_count),
                        main_loop
                    )

            moscow_time = format_moscow_time()
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {moscow_time}, –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {new_count}")
        else:
            moscow_time = format_moscow_time()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤ {moscow_time}")

    except Exception as e:
        moscow_time = format_moscow_time()
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ scheduled_parsing –≤ {moscow_time}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    import schedule

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule.every(2).hours.do(scheduled_parsing)

    moscow_time = format_moscow_time()
    print(f"üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞) –≤ {moscow_time}")

    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        except Exception as e:
            moscow_time = format_moscow_time()
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –≤ {moscow_time}: {e}")
            time.sleep(60)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    global main_loop
    main_loop = asyncio.get_running_loop()

    moscow_time = format_moscow_time()
    print(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time}!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
    scheduled_parsing()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        await dp.start_polling(
            bot,
            polling_timeout=20,
            request_timeout=15,
            retry_after=3
        )
    except KeyboardInterrupt:
        moscow_time = format_moscow_time()
        print(f"üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ {moscow_time}")
    except Exception as e:
        moscow_time = format_moscow_time()
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {moscow_time}: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        moscow_time = format_moscow_time()
        print(f"üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {moscow_time}")
    except Exception as e:
        moscow_time = format_moscow_time()
        print(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {moscow_time}: {e}")